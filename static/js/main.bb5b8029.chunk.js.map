{"version":3,"sources":["presentation/organisms/LoginForm/LoginForm.tsx","presentation/pages/Login/LoginPage.tsx","presentation/organisms/SignUpForm/SignUpNext.tsx","utils/get-random.js","presentation/organisms/SignUpForm/SignUpBasicInfo.tsx","presentation/atoms/Loader.tsx","presentation/organisms/SignUpForm/SignUpSuccess.tsx","presentation/organisms/SignUpForm/SignUpForm.tsx","presentation/pages/SignUp/SignUpPage.tsx","presentation/organisms/Navbar/Navbar.tsx","presentation/organisms/SideMenu/SideMenu.tsx","presentation/pages/Dashboard/DashboardPage.tsx","presentation/pages/NotFoundPage/NotFoundPage.tsx","domain/navigation/router.tsx","App.tsx","domain/redux/reducers/RootReducer.ts","domain/redux/store.ts","serviceWorker.js","presentation/theme/index.ts","presentation/theme/theme.ts","index.js"],"names":["LoginForm","useEffect","document","title","Box","borderWidth","px","width","maxWidth","borderRadius","textAlign","boxShadow","backgroundColor","p","Text","Heading","wordBreak","color","my","FormControl","FormLabel","Input","type","placeholder","mt","Stack","isInline","justifyContent","Checkbox","Link","Button","href","LoginPage","Flex","minHeight","align","SignUpNextButton","props","nextStep","disabled","label","isDisabled","onClick","getRandom","min","max","Math","floor","random","SignUpBasicInfo","useState","tos","setTos","examples","name","email","length","example","isRequired","onChange","m","options","Object","assign","Spinner","SignUpSuccess","loading","setLoader","history","useHistory","role","aria-label","as","size","ml","mb","List","icon","Loader","bg","setTimeout","push","SignUpForm","isHashEnabled","transitions","hashKey","SignUpPage","Navbar","justify","wrap","padding","mr","letterSpacing","SideMenu","flexDirection","height","py","borderTop","paddingY","variant","variantColor","DashboardPage","NotFoundPage","PrivateRoute","path","component","rest","render","location","user","isAuthenticated","to","pathname","state","from","CompleteRouter","exact","App","RootReducer","combineReducers","store","configureStore","reducer","Boolean","window","hostname","match","theme","colors","brand","900","ReactDOM","StrictMode","ThemeProvider","CSSReset","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb5b8029.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  Box,\n  Text,\n  Heading,\n  Link,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Checkbox,\n  Button,\n} from \"@chakra-ui/core\";\n\nconst LoginForm = () => {\n  useEffect(() => {\n    document.title = \"Iniciar sesión | Almacenear\";\n  }, []);\n\n  return (\n    <Box\n      borderWidth={1}\n      px={4}\n      width=\"full\"\n      maxWidth=\"500px\"\n      borderRadius={4}\n      textAlign=\"center\"\n      boxShadow=\"lg\"\n      backgroundColor={\"white\"}\n    >\n      <Box p={4}>\n        <Box textAlign=\"center\">\n          <Text>Portal Administrativo</Text>\n          <Heading>\n            <Text wordBreak={\"break-word\"} color={\"red.500\"}>\n              AlmaceNear\n            </Text>\n          </Heading>\n        </Box>\n\n        <Box my={8} textAlign=\"left\">\n          <form>\n            <FormControl>\n              <FormLabel>Email</FormLabel>\n              <Input type=\"email\" placeholder=\"Ingresa tu email\" />\n            </FormControl>\n\n            <FormControl mt={4}>\n              <FormLabel>Contraseña</FormLabel>\n              <Input type=\"password\" placeholder=\"Ingresa tu contraseña\" />\n            </FormControl>\n\n            <Stack isInline justifyContent=\"space-between\" mt={4}>\n              <Box>\n                <Checkbox>Recuérdame</Checkbox>\n              </Box>\n              <Box>\n                <Link color={`red.500`}>¿Olvidaste tu contaseña?</Link>\n              </Box>\n            </Stack>\n\n            <Button width=\"full\" mt={4} color={\"red.500\"}>\n              Ingresar\n            </Button>\n            <Link href=\"/signup\">\n              <Button type=\"button\" width=\"full\" mt={4} color={\"blue.500\"}>\n                Regístrate\n              </Button>\n            </Link>\n          </form>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"../../organisms/LoginForm/LoginForm\";\n\nimport React from \"react\";\nimport { Flex } from \"@chakra-ui/core\";\n\nconst LoginPage = () => {\n  return (\n    <Flex\n      minHeight=\"100vh\"\n      width=\"full\"\n      align=\"center\"\n      justifyContent=\"center\"\n      backgroundColor={\"red.500\"}\n    >\n      <LoginForm />\n    </Flex>\n  );\n};\n\nexport default LoginPage;\n","import React from \"react\";\n\nimport { Button } from \"@chakra-ui/core\";\n\ninterface BasicInfo {\n  nextStep: Function;\n  label?: String;\n  disabled?: Boolean;\n}\n\nconst SignUpNextButton = (props: BasicInfo) => {\n  const nextStep = props.nextStep as Function;\n  const { disabled = false, label = \"Siguiente\" } = props;\n\n  return (\n    <Button\n      type=\"button\"\n      isDisabled={!!disabled}\n      width=\"full\"\n      mt={4}\n      color={\"blue.500\"}\n      onClick={() => nextStep()}\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default SignUpNextButton;\n","/**\n * @method getRandom\n * @description Get a random number inside a range\n * @usage getRandom(0, 100)\n */\nconst getRandom = (min = 0, max = 10) => {\n  return Math.floor(Math.random() * max) + min;\n};\n\nexport default getRandom;\n","import React, { Fragment, useState } from \"react\";\n\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Link,\n  Checkbox,\n} from \"@chakra-ui/core\";\n\nimport GoToNextButton from \"./SignUpNext\";\n\nimport getRandom from \"../../../utils/get-random\";\n\ninterface BasicInfo {\n  hashKey: string;\n  nextStep?: Function;\n}\n\nconst SignUpBasicInfo = (props: BasicInfo) => {\n  const nextStep = props.nextStep as Function;\n\n  const [tos, setTos] = useState(false);\n  const toggleTos = () => setTos(!tos);\n\n  const getExample = () => {\n    const examples = [\n      { name: \"Panadería Don Pedro\", email: \"panaderia@ejemplo.com\" },\n      { name: \"Carpintería María\", email: \"carpinteria@ejemplo.com\" },\n      { name: \"Pastelería Providencia\", email: \"pasteleria@ejemplo.com\" },\n    ];\n\n    return examples[getRandom(0, examples.length)];\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [example, _setExample] = useState(getExample);\n\n  return (\n    <Fragment>\n      <FormControl>\n        <FormLabel>¿Cómo se llama tu tienda?</FormLabel>\n        <Input type=\"text\" placeholder={example.name} isRequired={true} />\n      </FormControl>\n\n      <FormControl my=\"4\">\n        <FormLabel>Ingresa tu nombre</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Ejemplo: Pedro Pérez\"\n          isRequired={true}\n        />\n      </FormControl>\n\n      <FormControl my=\"4\">\n        <FormLabel>Ingresa tu correo electrónico</FormLabel>\n        <Input type=\"email\" placeholder={example.email} isRequired={true} />\n      </FormControl>\n\n      <FormControl>\n        <FormLabel>Contraseña</FormLabel>\n        <Input\n          type=\"password\"\n          placeholder=\"Ingresa tu contraseña\"\n          isRequired={true}\n        />\n      </FormControl>\n\n      <Box mt=\"3\">\n        <Checkbox onChange={toggleTos}>\n          Acepto los\n          <Link m=\"1\" color={`red.500`}>\n            Términos de Servicio\n          </Link>\n        </Checkbox>\n      </Box>\n\n      <GoToNextButton\n        nextStep={() => nextStep()}\n        label={\"Comenzar\"}\n        disabled={!tos}\n      />\n    </Fragment>\n  );\n};\n\nexport default SignUpBasicInfo;\n","/* @ts-disable */\nimport React from \"react\";\nimport { Box, Spinner } from \"@chakra-ui/core\";\n\ninterface Options {\n  textAlign?: any;\n  bg?: any;\n  p?: any;\n}\n\nexport default (props: Options) => {\n  const defaultOptions: Options = {\n    textAlign: \"center\",\n    p: \"2\",\n  };\n\n  const options = Object.assign(defaultOptions, props);\n\n  return (\n    <Box {...options}>\n      <Spinner></Spinner>\n    </Box>\n  );\n};\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { Fragment, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Box, List, ListItem, ListIcon, Heading, Text } from \"@chakra-ui/core\";\n\nimport GoToNextButton from \"./SignUpNext\";\n\nimport Loader from \"../../atoms/Loader\";\n\nconst SignUpSuccess = (props: any) => {\n  const [loading = false, setLoader] = useState();\n  const history = useHistory();\n\n  const goToLogin = () => {\n    setLoader(true);\n    setTimeout(() => {\n      history.push(\"/login\");\n    }, 2500);\n  };\n\n  return (\n    <Fragment>\n      <Box textAlign=\"center\">\n        <Text wordBreak={\"break-word\"} color={\"red.500\"}>\n          <span role=\"img\" aria-label=\"Success\">\n            🎉\n          </span>\n          <Heading as=\"h4\" size=\"lg\" ml=\"2\">\n            ¡Bienvenid@!\n          </Heading>\n        </Text>\n      </Box>\n\n      <Text mt=\"8\" mb=\"2\">\n        En <strong>Almacenear</strong> podrás realizar fácilmente las siguientes\n        tareas\n      </Text>\n\n      <List mb=\"2\">\n        <ListItem>\n          <ListIcon icon=\"check-circle\" color=\"green.500\" /> Entregar\n          información valiosa a tus clientes\n        </ListItem>\n        <ListItem>\n          <ListIcon icon=\"check-circle\" color=\"green.500\" /> Gestionar tu\n          inventario\n        </ListItem>\n        <ListItem>\n          <ListIcon icon=\"check-circle\" color=\"green.500\" /> Agilizar tus\n          procesos\n        </ListItem>\n      </List>\n\n      {loading ? (\n        <Loader bg=\"gray.100\" />\n      ) : (\n        <GoToNextButton label=\"Comenzar\" nextStep={goToLogin} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default SignUpSuccess;\n","import React, { useEffect } from \"react\";\n\nimport StepWizard from \"react-step-wizard\";\nimport { Box, Text, Heading } from \"@chakra-ui/core\";\n\nimport BasicInfo from \"./SignUpBasicInfo\";\nimport SignUpSuccess from \"./SignUpSuccess\";\n// import SignUpProducts from \"./SignUpProducts\";\n\nconst SignUpForm = () => {\n  useEffect(() => {\n    document.title = \"Formulario de Registro | Almacenear\";\n  }, []);\n\n  return (\n    <Box\n      borderWidth={1}\n      px={4}\n      width=\"full\"\n      maxWidth=\"500px\"\n      borderRadius={4}\n      textAlign=\"center\"\n      boxShadow=\"lg\"\n      backgroundColor={\"white\"}\n    >\n      <Box p={4}>\n        <Box textAlign=\"center\">\n          <Text>¡Ya estás más cerca de tus clientes!</Text>\n          <Heading as=\"h1\" my=\"3\">\n            <Text wordBreak={\"break-word\"} color={\"red.500\"}>\n              AlmaceNear\n            </Text>\n          </Heading>\n        </Box>\n\n        <Box my=\"4\" textAlign=\"left\">\n          <form>\n            <StepWizard isHashEnabled={true} transitions={{}}>\n              <BasicInfo hashKey=\"basic\" />\n              <SignUpSuccess hashKey=\"success\" />\n            </StepWizard>\n          </form>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default SignUpForm;\n","import SignUpForm from \"../../organisms/SignUpForm/SignUpForm\";\n\nimport React from \"react\";\nimport { Flex } from \"@chakra-ui/core\";\n\nconst SignUpPage = () => {\n  return (\n    <Flex\n      minHeight=\"100vh\"\n      width=\"full\"\n      align=\"center\"\n      justifyContent=\"center\"\n      backgroundColor={\"red.500\"}\n    >\n      <SignUpForm />\n    </Flex>\n  );\n};\n\nexport default SignUpPage;\n","import React from \"react\";\nimport { Flex, Heading } from \"@chakra-ui/core\";\n\nconst Navbar = () => {\n  return (\n    <Flex\n      as=\"nav\"\n      align=\"center\"\n      justify=\"space-between\"\n      wrap=\"wrap\"\n      padding=\"1.5rem\"\n      bg=\"red.500\"\n      width=\"100%\"\n      color=\"white\"\n    >\n      <Flex align=\"center\" mr={5}>\n        <Heading color=\"white\" as=\"h1\" size=\"lg\" letterSpacing={\"-.1rem\"}>\n          AlmaceNear\n        </Heading>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Flex, Button } from \"@chakra-ui/core\";\n\nconst SideMenu = () => {\n  return (\n    <Flex\n      as=\"nav\"\n      wrap=\"wrap\"\n      color=\"white\"\n      flexDirection=\"column\"\n      align={\"space-around\"}\n      backgroundColor=\"red.500\"\n      height=\"full\"\n      width={1 / 5}\n      py=\"100px\"\n      borderTop=\"1px\"\n    >\n      <Flex paddingY=\"19px\" justifyContent=\"center\">\n        <Button variant=\"link\" width=\"50px\" variantColor=\"red.500\">\n          Almacenes\n        </Button>\n      </Flex>\n      <Flex paddingY=\"19px\" justifyContent=\"center\">\n        <Button variant=\"link\" width=\"50px\" variantColor=\"red.500\">\n          Productos\n        </Button>\n      </Flex>\n      <Flex paddingY=\"19px\" justifyContent=\"center\">\n        <Button variant=\"link\" width=\"50px\" variantColor=\"red.500\">\n          Configuraciones\n        </Button>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default SideMenu;\n","import React from \"react\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { Navbar } from \"../../organisms/Navbar\";\nimport { SideMenu } from \"../../organisms/SideMenu\";\n\nconst DashboardPage = () => {\n  return (\n    <Flex height=\"100%\" width=\"100%\" flexDirection=\"column\">\n      <Navbar />\n      <SideMenu />\n    </Flex>\n  );\n};\nexport default DashboardPage;\n","import React from \"react\";\nimport { Flex, Heading } from \"@chakra-ui/core\";\n\nconst NotFoundPage = () => {\n  return (\n    <Flex width=\"full\" justifyContent=\"center\" align=\"center\">\n      <Heading>Pagina no encontrada</Heading>\n    </Flex>\n  );\n};\n\nexport default NotFoundPage;\n","import React, { ReactNode } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { LoginPage } from \"../../presentation/pages/Login\";\nimport { SignUpPage } from \"../../presentation/pages/SignUp\";\nimport { DashboardPage } from \"../../presentation/pages/Dashboard\";\nimport { NotFoundPage } from \"../../presentation/pages/NotFoundPage\";\n\n// screen if you're not yet authenticated.\ninterface PrivateRouteProps {\n  path: string;\n  component: ReactNode | ReactNode[];\n}\n\nconst CompleteRouter = () => {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/login\" component={LoginPage} />\n          <Route path=\"/signup\" component={SignUpPage} />\n          <PrivateRoute path=\"/dashboard\" component={<DashboardPage />} />\n          <Route exact path=\"/\">\n            <Redirect to=\"/login\" />\n          </Route>\n          <Route path=\"*\" component={NotFoundPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nconst PrivateRoute = ({ path, component, ...rest }: PrivateRouteProps) => {\n  return (\n    <Route\n      {...rest}\n      path={path}\n      render={({ location }) =>\n        user.isAuthenticated ? (\n          component\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst user = {\n  isAuthenticated: true,\n};\n\nexport default CompleteRouter;\n","import React from \"react\";\nimport { CompleteRouter } from \"./domain/navigation\";\n\nfunction App() {\n  return (\n    <div>\n      <CompleteRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nconst RootReducer = combineReducers({});\n\nexport type RootState = ReturnType<typeof RootReducer>;\n\nexport default RootReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport RootReducer from \"./reducers/RootReducer\";\n\nconst store = configureStore({\n  reducer: RootReducer,\n});\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./reducers/RootReducer\", () => {\n    const newRootReducer = RootReducer;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import theme from \"./theme\";\n\nexport default theme;\n","import { theme } from \"@chakra-ui/core\";\n\nexport default {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    brand: {\n      900: \"#1a365d\",\n    },\n  },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./domain/redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport theme from \"./presentation/theme\";\n\nconst render = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <CSSReset />\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./App.tsx\", render);\n}\nserviceWorker.unregister();\n"],"sourceRoot":""}